/**
 * @file common_sequences.inc.glsl
 * @author lachbr
 * @date 2020-11-06
 */

#ifndef COMMON_SEQUENCES_INC_GLSL
#define COMMON_SEQUENCES_INC_GLSL

vec2 poissonDisk_8[8] = vec2[](
    vec2(  0.3475f,  0.0042f ),
    vec2(  0.8806f,  0.3430f ),
    vec2( -0.0041f, -0.6197f ),
    vec2(  0.0472f,  0.4964f ),
    vec2( -0.3730f,  0.0874f ),
    vec2( -0.9217f, -0.3177f ),
    vec2( -0.6289f,  0.7388f ),
    vec2(  0.5744f, -0.7741f )
);

vec2 poissonDisk_16[16] = vec2[](
    vec2( -0.94201624, -0.39906216 ),
    vec2( 0.94558609, -0.76890725 ),
    vec2( -0.094184101, -0.92938870 ),
    vec2( 0.34495938, 0.29387760 ),
    vec2( -0.91588581, 0.45771432 ),
    vec2( -0.81544232, -0.87912464 ),
    vec2( -0.38277543, 0.27676845 ),
    vec2( 0.97484398, 0.75648379 ),
    vec2( 0.44323325, -0.97511554 ),
    vec2( 0.53742981, -0.47373420 ),
    vec2( -0.26496911, -0.41893023 ),
    vec2( 0.79197514, 0.19090188 ),
    vec2( -0.24188840, 0.99706507 ),
    vec2( -0.81409955, 0.91437590 ),
    vec2( 0.19984126, 0.78641367 ),
    vec2( 0.14383161, -0.14100790 )
);

const vec2 halton_2D_16[16] = vec2[](
    vec2(0.00000, -0.33333),
    vec2(-0.50000, 0.33333),
    vec2(0.50000, -0.77778),
    vec2(-0.75000, -0.11111),
    vec2(0.25000, 0.55556),
    vec2(-0.25000, -0.55556),
    vec2(0.75000, 0.11111),
    vec2(-0.87500, 0.77778),
    vec2(0.12500, -0.92593),
    vec2(-0.37500, -0.25926),
    vec2(0.62500, 0.40741),
    vec2(-0.62500, -0.70370),
    vec2(0.37500, -0.03704),
    vec2(-0.12500, 0.62963),
    vec2(0.87500, -0.48148),
    vec2(-0.93750, 0.18519)
);

const vec2 halton_2D_8[8] = vec2[](
    vec2(0.00000, -0.33333),
    vec2(-0.50000, 0.33333),
    vec2(0.50000, -0.77778),
    vec2(-0.75000, -0.11111),
    vec2(0.25000, 0.55556),
    vec2(-0.25000, -0.55556),
    vec2(0.75000, 0.11111),
    vec2(-0.87500, 0.77778)
);

const vec2 halton_2D_32[32] = vec2[](
    vec2(0.00000, -0.33333),
    vec2(-0.50000, 0.33333),
    vec2(0.50000, -0.77778),
    vec2(-0.75000, -0.11111),
    vec2(0.25000, 0.55556),
    vec2(-0.25000, -0.55556),
    vec2(0.75000, 0.11111),
    vec2(-0.87500, 0.77778),
    vec2(0.12500, -0.92593),
    vec2(-0.37500, -0.25926),
    vec2(0.62500, 0.40741),
    vec2(-0.62500, -0.70370),
    vec2(0.37500, -0.03704),
    vec2(-0.12500, 0.62963),
    vec2(0.87500, -0.48148),
    vec2(-0.93750, 0.18519),
    vec2(0.06250, 0.85185),
    vec2(-0.43750, -0.85185),
    vec2(0.56250, -0.18519),
    vec2(-0.68750, 0.48148),
    vec2(0.31250, -0.62963),
    vec2(-0.18750, 0.03704),
    vec2(0.81250, 0.70370),
    vec2(-0.81250, -0.40741),
    vec2(0.18750, 0.25926),
    vec2(-0.31250, 0.92593),
    vec2(0.68750, -0.97531),
    vec2(-0.56250, -0.30864),
    vec2(0.43750, 0.35802),
    vec2(-0.06250, -0.75309),
    vec2(0.93750, -0.08642),
    vec2(-0.96875, 0.58025)
);

const vec2 halton_2D_64[64] = vec2[](
    vec2(0.00000, -0.33333),
    vec2(-0.50000, 0.33333),
    vec2(0.50000, -0.77778),
    vec2(-0.75000, -0.11111),
    vec2(0.25000, 0.55556),
    vec2(-0.25000, -0.55556),
    vec2(0.75000, 0.11111),
    vec2(-0.87500, 0.77778),
    vec2(0.12500, -0.92593),
    vec2(-0.37500, -0.25926),
    vec2(0.62500, 0.40741),
    vec2(-0.62500, -0.70370),
    vec2(0.37500, -0.03704),
    vec2(-0.12500, 0.62963),
    vec2(0.87500, -0.48148),
    vec2(-0.93750, 0.18519),
    vec2(0.06250, 0.85185),
    vec2(-0.43750, -0.85185),
    vec2(0.56250, -0.18519),
    vec2(-0.68750, 0.48148),
    vec2(0.31250, -0.62963),
    vec2(-0.18750, 0.03704),
    vec2(0.81250, 0.70370),
    vec2(-0.81250, -0.40741),
    vec2(0.18750, 0.25926),
    vec2(-0.31250, 0.92593),
    vec2(0.68750, -0.97531),
    vec2(-0.56250, -0.30864),
    vec2(0.43750, 0.35802),
    vec2(-0.06250, -0.75309),
    vec2(0.93750, -0.08642),
    vec2(-0.96875, 0.58025),
    vec2(0.03125, -0.53086),
    vec2(-0.46875, 0.13580),
    vec2(0.53125, 0.80247),
    vec2(-0.71875, -0.90123),
    vec2(0.28125, -0.23457),
    vec2(-0.21875, 0.43210),
    vec2(0.78125, -0.67901),
    vec2(-0.84375, -0.01235),
    vec2(0.15625, 0.65432),
    vec2(-0.34375, -0.45679),
    vec2(0.65625, 0.20988),
    vec2(-0.59375, 0.87654),
    vec2(0.40625, -0.82716),
    vec2(-0.09375, -0.16049),
    vec2(0.90625, 0.50617),
    vec2(-0.90625, -0.60494),
    vec2(0.09375, 0.06173),
    vec2(-0.40625, 0.72840),
    vec2(0.59375, -0.38272),
    vec2(-0.65625, 0.28395),
    vec2(0.34375, 0.95062),
    vec2(-0.15625, -0.95062),
    vec2(0.84375, -0.28395),
    vec2(-0.78125, 0.38272),
    vec2(0.21875, -0.72840),
    vec2(-0.28125, -0.06173),
    vec2(0.71875, 0.60494),
    vec2(-0.53125, -0.50617),
    vec2(0.46875, 0.16049),
    vec2(-0.03125, 0.82716),
    vec2(0.96875, -0.87654),
    vec2(-0.98438, -0.20988)
);

vec4 blur13(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.411764705882353) * direction;
  vec2 off2 = vec2(3.2941176470588234) * direction;
  vec2 off3 = vec2(5.176470588235294) * direction;
  color += texture(image, uv) * 0.1964825501511404;
  color += texture(image, uv + (off1 / resolution)) * 0.2969069646728344;
  color += texture(image, uv - (off1 / resolution)) * 0.2969069646728344;
  color += texture(image, uv + (off2 / resolution)) * 0.09447039785044732;
  color += texture(image, uv - (off2 / resolution)) * 0.09447039785044732;
  color += texture(image, uv + (off3 / resolution)) * 0.010381362401148057;
  color += texture(image, uv - (off3 / resolution)) * 0.010381362401148057;
  return color;
}

vec4 blur5(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.3333333333333333) * direction;
  color += texture(image, uv) * 0.29411764705882354;
  color += texture(image, uv + (off1 / resolution)) * 0.35294117647058826;
  color += texture(image, uv - (off1 / resolution)) * 0.35294117647058826;
  return color;
}

vec4 blur9(sampler2D image, vec2 uv, vec2 resolution, vec2 direction) {
  vec4 color = vec4(0.0);
  vec2 off1 = vec2(1.3846153846) * direction;
  vec2 off2 = vec2(3.2307692308) * direction;
  color += texture(image, uv) * 0.2270270270;
  color += texture(image, uv + (off1 / resolution)) * 0.3162162162;
  color += texture(image, uv - (off1 / resolution)) * 0.3162162162;
  color += texture(image, uv + (off2 / resolution)) * 0.0702702703;
  color += texture(image, uv - (off2 / resolution)) * 0.0702702703;
  return color;
}

#endif // COMMON_SEQUENCES_INC_GLSL
